1. grep stands for Global Regular Expression print
2. grep processes line by line and print those lines which matches patterns

man tar > file.txt

Syntax:
    grep <patterns> <filename>

==> Search pattern "options" in file.txt
    grep "options" file.txt

==> To ignore case in pattern
    grep -i "options" file.txt

==> To include line no of matched pattern
    grep -in "options" file.txt

==> To search patterns in multiple file
    grep -in "options" file.txt file1.txt file2.txt

==> To search patterns in all files in current directory
    grep -in "options" *

==> To print lines which doesn't contain specific pattern (-v)
    grep -nv "options" file.txt



grep -rnw '/path/to/somewhere/' -e 'pattern'

-r or -R is recursive,
-n is line number, and
-w stands for match the whole word.
-l (lower-case L) can be added to just give the file name of matching files.
-e is the pattern used during the search
Along with these, --exclude, --include, --exclude-dir flags could be used for efficient searching:

This will only search through those files which have .c or .h extensions:
grep --include=\*.{c,h} -rnw '/path/to/somewhere/' -e "pattern"
This will exclude searching all the files ending with .o extension:
grep --exclude=\*.o -rnw '/path/to/somewhere/' -e "pattern"
For directories it's possible to exclude one or more directories using the --exclude-dir parameter. For example, this will exclude the dirs dir1/, dir2/ and all of them matching *.dst/:
grep --exclude-dir={dir1,dir2,*.dst} -rnw '/path/to/somewhere/' -e "pattern"
This works very well for me, to achieve almost the same purpose like yours.

For more options check man grep.